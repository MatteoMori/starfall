k8s_cluster_scanner:
  description: >
    Perform a meticulous scan of the Kubernetes cluster to identify all namespaces and deployments explicitly labeled with "starfall.io/enabled=true".
    For each matching deployment, extract and report:
      - Namespace name
      - Deployment name
      - For every container: name, image, image tag, and current version
      - All deployment labels
    Additionally, capture the Kubernetes cluster's current version and the timestamp of the scan.
    The output must be a structured, machine-readable, JSON, report that enables downstream agents 
    and humans to easily assess upgrade eligibility, plan actions, and track changes over time.
    Exclude any deployments or namespaces that do not have the specified label.
    Do not perform any upgrade or modification actions; your sole responsibility is to scan and report.
    
  expected_output: >
    A validated K8sClusterScanResult object with the following structure:
      kubernetes_control_plane:
        current_version: <Current Kubernetes control plane version string>
        latest_version: <Latest available Kubernetes version (to be filled by discovery task)>
        name: "Kubernetes"
        scanned_at: <ISO8601 UTC timestamp of scan>
      apps: List of deployments, each with:
        - name: <Deployment name>
        - namespace: <Namespace name>
        - deployment: <Deployment identifier>
        - containers: List of containers, each with:
            - name: <Container name>
            - image: <Full image path>
            - current_version: <Image tag or version>
        - labels: Dictionary of deployment labels

  agent: platform_engineer



latest_version_discovery_task:
  description: >
    Using the output from the 'k8s_cluster_scanner' task as your input context, 
    you must inspect BOTH the Kubernetes control plane AND EVERY application and container listed in the scan output.
    For the control plane:
      - Search only the official Kubernetes releases page or site for the latest stable version.
      - Update 'latest_version' and 'latest_version_info_url' accordingly.
    For applications:
      - For each object in the 'apps' array, and for each container in its 'containers' array:
        - Search ONLY the official vendor website or official GitHub repository releases page for the latest stable (non-pre-release, non-RC) version of the underlying software.
        - Update the 'latest_version' and 'latest_version_info_url' for each container.
      - Do NOT skip any application or container.
      - If you cannot find a version, leave the fields as null, but do not remove the container or app from the output.
    Do NOT use DockerHub, third-party registries, or unofficial sources.
    Do NOT perform upgrade analysis or summarize release notes.
    Your ONLY responsibility is to update the 'latest_version' and 'latest_version_info_url' fields for every container under every app, and for the control plane, based on official sources.

  expected_output: >
    The output must match the following structure:
      kubernetes_control_plane:
        current_version: <Current Kubernetes control plane version string>
        latest_version: <Latest available Kubernetes release version string>
        latest_version_info_url: <URL to official Kubernetes release notes or version listing>
        name: <"Kubernetes">
        scanned_at: <ISO8601 UTC timestamp of scan>
      apps: List of deployments, each with:
        - name: <Deployment name>
        - namespace: <Namespace name>
        - deployment: <Deployment identifier>
        - containers: List of containers, each with:
            - name: <Container name>
            - image: <Full image path>
            - current_version: <Image tag or version>
            - latest_version: <Latest available stable software release version string>
            - latest_version_info_url: <URL to official release notes or version listing>
        - labels: Dictionary of deployment labels

  agent: latest_version_discovery_agent
  context: [k8s_cluster_scanner]



# latest_version_discovery_task:
#   description: >
#     For each application and container found in the cluster scan output,
#     search authoritative sources online to find and verify the latest available release version.
#     Enrich the scan results by populating the 'latest_version' and 'latest_version_info_url' fields
#     for each container and for the cluster itself.
#     Do not perform upgrade analysis or summarize release notes—just update the data structure with the latest version information.

#   expected_output: >
#     The same K8sClusterScanResult object, now populated with latest_version and latest_version_info_url fields
#     for the cluster and each container.

#   agent: latest_version_discovery_agent
#   #context: [k8s_cluster_scanner]







# technical_web_search_task:
#   description: >
#     For each application and Kubernetes version detected by the K8s Scanner, 
#     search the web for official release notes, changelogs, and feature documentation.
#     Identify authoritative sources (e.g., GitHub releases, official docs, vendor changelogs) relevant to each app and its current version.
#     Do not summarize or analyze the content—just provide curated URLs for downstream scraping.

#   expected_output: >
#     A validated ReleaseNoteLinksOutput object containing:
#       - cluster_version: The version of the scanned Kubernetes cluster.
#       - app_release_note_links: For each scanned application, include its name, current version, and a list of URLs to official release notes or changelogs.

#   agent: technical_web_searcher


# technical_web_search_task:
#   description: >
#     Search the web for release notes, features, and breaking changes for
#     Platform Engineering tooling, focusing on Kubernetes 1.32.
#     You want to find the latest updates, improvements, and any breaking changes
#     that could impact our deployments.

#   expected_output: >
#     A structured summary of the latest release notes, features, and breaking changes
#     for the specified tools, including links to the original sources.

#   agent: technical_web_searcher

